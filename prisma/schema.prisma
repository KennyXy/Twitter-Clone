// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // referentialIntegrity = "prisma"
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  name         String?
  username     String  @unique
  password     String
  profileImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Refresh Token 
  refreshToken RefreshToken[]

  //Tweet
  tweet Tweet[]

  //MediaFiles
  mediaFiles MediaFiles[]
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Tweet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Author

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  //Replies

  replyToId String? @db.ObjectId
  replyTo  Tweet?  @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Tweet[] @relation("replies")

  //MediaFiles
  mediaFiles MediaFiles[]
}

model MediaFiles {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  providerPublicId String
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  //User
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  //Tweets (A media file can belong to a tweet)

  Tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String? @db.ObjectId
}
